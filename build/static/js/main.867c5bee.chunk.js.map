{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/constants.jsx","components/canvas.jsx","components/tttfield.jsx","components/tictactoe.jsx","index.js"],"names":["module","exports","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","constants","EMPTY","X","O","Canvas","componentDidMount","updateCanvas","canvas","refs","undefined","ctx","getContext","w","width","h","height","fillStyle","fillRect","props","value","lineWidth","strokeStyle","drawX","drawO","this","class","ref","onClick","beginPath","moveTo","lineTo","stroke","bezierCurveTo","Component","renderRow","r","field","onclick","className","slice","map","i","key","renderField","index","TicTacToe","Array","fill","headline","player_symbol","opponent_symbol","player_name","opponent_name","socket","yourTurn","isOver","id","makeMove","alert","updateMoveToField","transmitMove","swapTurn","setState","emit","cell_id","s","currentTurnHeadline","whosTurn","result","didSomeBodyWin","full","matches","winCombinations","length","charAt","cell","includes","socketIOClient","origin","on","data","setPlayer","l","symbol","ReactDOM","render","document","getElementById","URL","process","href","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.867c5bee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const constants = {\r\n  EMPTY: \" \",\r\n  X: \"X\",\r\n  O: \"O\"\r\n};\r\n\r\nexport default constants;\r\n","import React, { Component } from \"react\";\r\nimport constants from \"./constants\";\r\n\r\nclass Canvas extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    this.updateCanvas();\r\n    return (\r\n      <canvas class=\"col\" ref=\"canvas\" onClick={this.props.onClick}></canvas>\r\n    );\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.updateCanvas();\r\n  };\r\n\r\n  updateCanvas = () => {\r\n    const canvas = this.refs.canvas;\r\n    if (canvas !== undefined) {\r\n      const ctx = canvas.getContext(\"2d\");\r\n      const w = canvas.width;\r\n      const h = canvas.height;\r\n\r\n      ctx.fillStyle = \"grey\";\r\n      ctx.fillRect(0, 0, w, h);\r\n      if (\r\n        this.props.value === constants.X ||\r\n        this.props.value === constants.O\r\n      ) {\r\n        ctx.lineWidth = 10;\r\n        ctx.strokeStyle = \"red\";\r\n        if (this.props.value === constants.X) {\r\n          this.drawX(ctx, w, h);\r\n        } else if (this.props.value === constants.O) {\r\n          this.drawO(ctx, w, h);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  drawX(ctx, w, h) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(0, 0);\r\n    ctx.lineTo(w, h);\r\n    ctx.moveTo(0, h);\r\n    ctx.lineTo(w, 0);\r\n    ctx.stroke();\r\n  }\r\n\r\n  drawO(ctx, w, h) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(0, h / 2);\r\n    ctx.bezierCurveTo(0, h, w, h, w, h / 2);\r\n    ctx.bezierCurveTo(w, 0, 0, 0, 0, h / 2);\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\nimport Canvas from \"./canvas\";\r\n\r\nconst renderField = (field, onclick) => {\r\n  return (\r\n    <div className=\"container\">\r\n      {[0, 1, 2].map(index => {\r\n        return renderRow(index, field, onclick);\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderRow = (r, field, onclick) => {\r\n  return (\r\n    <div className=\"row\">\r\n      {field.slice(r * 3, r * 3 + 3).map((value, i) => (\r\n        <div className=\"col col-4\" key={r * 3 + i + \"_div\"}>\r\n          <Canvas\r\n            value={value}\r\n            key={r * 3 + i}\r\n            onClick={() => onclick(r * 3 + i)}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default renderField;\r\n","import React, { Component } from \"react\";\r\nimport constants from \"./constants\";\r\nimport renderField from \"./tttfield\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nclass TicTacToe extends Component {\r\n  state = {\r\n    field: new Array(9).fill(constants.EMPTY),\r\n    headline: \"waiting for opponent\",\r\n    player_symbol: undefined,\r\n    opponent_symbol: undefined,\r\n    player_name: undefined,\r\n    opponent_name: undefined,\r\n    socket: undefined,\r\n    yourTurn: false,\r\n    isOver: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    //var name = window.prompt(\"Whats your name?\");\r\n    var name = \"justin\";\r\n    const socket = socketIOClient(window.location.origin);\r\n    socket.emit(\"player_data\", {\r\n      player_name: name\r\n    });\r\n    socket.on(\"move.made\", data => this.makeMove(data.cell_id));\r\n    socket.on(\"get.opponent.name\", data =>\r\n      this.setState({ opponent_name: data.opponent_name })\r\n    );\r\n    socket.on(\"game.begin\", data => this.setPlayer(data));\r\n    this.setState({ socket: socket, player_name: name });\r\n  }\r\n\r\n  setPlayer(data) {\r\n    let l;\r\n    if (data.symbol === constants.X) {\r\n      l = true;\r\n      this.setState({\r\n        player_symbol: data.symbol,\r\n        opponent_symbol: constants.O,\r\n        yourTurn: true\r\n      });\r\n    } else {\r\n      l = false;\r\n      this.setState({\r\n        player_symbol: constants.O,\r\n        opponent_symbol: constants.X,\r\n        yourTurn: false\r\n      });\r\n    }\r\n    this.setState({\r\n      headline: \"Game starts, \" + this.currentTurnHeadline(l)\r\n    });\r\n    if (data.opponent_name) {\r\n      this.setState({\r\n        opponent_name: data.opponent_name\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { state } = this;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 class=\"text-center\" key=\"headline\">\r\n          {state.headline}\r\n        </h1>\r\n        <br />\r\n        {renderField(state.field, this.onclick)}\r\n        <div className=\"text\">\r\n          {\" \"}\r\n          Hello {state.player_name}! <br />\r\n          Your are {state.player_symbol}\r\n          <br />\r\n          Opponent: {state.opponent_name} <br />\r\n          Opponent is {state.opponent_symbol}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onclick = id => {\r\n    if (this.state.yourTurn) {\r\n      this.makeMove(id);\r\n    } else {\r\n      window.alert(\"Not your turn!\");\r\n    }\r\n  };\r\n\r\n  makeMove = id => {\r\n    const { state } = this;\r\n    if (state.field[id] === constants.EMPTY) {\r\n      this.updateMoveToField(id);\r\n      this.transmitMove(id);\r\n      this.swapTurn();\r\n    }\r\n    this.isOver();\r\n  };\r\n\r\n  updateMoveToField = id => {\r\n    const { state } = this;\r\n    const field = [...state.field];\r\n    field[id] = state.yourTurn ? state.player_symbol : state.opponent_symbol;\r\n    this.setState({ field: field });\r\n  };\r\n\r\n  transmitMove = id => {\r\n    const { state } = this;\r\n    if (state.socket !== undefined && state.yourTurn) {\r\n      state.socket.emit(\"move.made\", {\r\n        cell_id: id\r\n      });\r\n    }\r\n  };\r\n\r\n  swapTurn = () => {\r\n    let s = this.state.yourTurn;\r\n    this.setState({ headline: this.currentTurnHeadline(!s), yourTurn: !s });\r\n  };\r\n\r\n  currentTurnHeadline = whosTurn => {\r\n    if (whosTurn) {\r\n      return \"your turn\";\r\n    } else {\r\n      return \"opponents turn\";\r\n    }\r\n  };\r\n\r\n  isOver = () => {\r\n    var result = this.didSomeBodyWin();\r\n    if (result !== constants.EMPTY) {\r\n      this.setState({ headline: \"Player \" + result + \" won!\", isOver: true });\r\n    } else if (this.full()) {\r\n      this.setState({ headline: \"Draw!\", isOver: true });\r\n    }\r\n  };\r\n\r\n  didSomeBodyWin = () => {\r\n    const { field } = this.state;\r\n    var matches = [\"XXX\", \"OOO\"];\r\n\r\n    var winCombinations = [\r\n      field[0] + field[1] + field[2], // 1st line\r\n      field[3] + field[4] + field[5], // 2nd line\r\n      field[6] + field[7] + field[8], // 3rd line\r\n      field[0] + field[3] + field[6], // 1st column\r\n      field[1] + field[4] + field[7], // 2nd column\r\n      field[2] + field[5] + field[8], // 3rd column\r\n      field[0] + field[4] + field[8], // Primary diagonal\r\n      field[2] + field[4] + field[6] // Secondary diagonal\r\n    ];\r\n\r\n    // Loop through all the rows looking for a match\r\n    for (var i = 0; i < winCombinations.length; i++) {\r\n      if (\r\n        winCombinations[i] === matches[0] ||\r\n        winCombinations[i] === matches[1]\r\n      ) {\r\n        return winCombinations[i].charAt(0);\r\n      }\r\n    }\r\n    return constants.EMPTY;\r\n  };\r\n\r\n  full = () => {\r\n    return !this.state.field\r\n      .map(cell => cell === constants.EMPTY)\r\n      .includes(true);\r\n  };\r\n}\r\n\r\nexport default TicTacToe;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport TicTacToe from \"./components/tictactoe\";\n\nReactDOM.render(<TicTacToe />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}